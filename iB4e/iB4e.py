# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_iB4e', [dirname(__file__)])
        except ImportError:
            import _iB4e
            return _iB4e
        if fp is not None:
            try:
                _mod = imp.load_module('_iB4e', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _iB4e = swig_import_helper()
    del swig_import_helper
else:
    import _iB4e
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class EuclideanVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuclideanVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EuclideanVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dimension"] = _iB4e.EuclideanVector_dimension_set
    __swig_getmethods__["dimension"] = _iB4e.EuclideanVector_dimension_get
    if _newclass:dimension = _swig_property(_iB4e.EuclideanVector_dimension_get, _iB4e.EuclideanVector_dimension_set)
    __swig_setmethods__["data"] = _iB4e.EuclideanVector_data_set
    __swig_getmethods__["data"] = _iB4e.EuclideanVector_data_get
    if _newclass:data = _swig_property(_iB4e.EuclideanVector_data_get, _iB4e.EuclideanVector_data_set)
    __swig_setmethods__["id"] = _iB4e.EuclideanVector_id_set
    __swig_getmethods__["id"] = _iB4e.EuclideanVector_id_get
    if _newclass:id = _swig_property(_iB4e.EuclideanVector_id_get, _iB4e.EuclideanVector_id_set)
    def __init__(self, *args): 
        this = _iB4e.new_EuclideanVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def deletedata(self): return _iB4e.EuclideanVector_deletedata(self)
    def get_split_value(self, *args): return _iB4e.EuclideanVector_get_split_value(self, *args)
    def set_split_value(self, *args): return _iB4e.EuclideanVector_set_split_value(self, *args)
    __swig_destroy__ = _iB4e.delete_EuclideanVector
    __del__ = lambda self : None;
    def Print(self): return _iB4e.EuclideanVector_Print(self)
    def Constructor(self, *args): return _iB4e.EuclideanVector_Constructor(self, *args)
    def Negation(self): return _iB4e.EuclideanVector_Negation(self)
    def plusequals(self, *args): return _iB4e.EuclideanVector_plusequals(self, *args)
    def minusequals(self, *args): return _iB4e.EuclideanVector_minusequals(self, *args)
    def timesequals(self, *args): return _iB4e.EuclideanVector_timesequals(self, *args)
    def get_mpq_values(self):
        import gmpy2
        split_values = self.get_split_values()
        return [gmpy2.mpq(val[0], val[1]) for val in split_values]

    def get_split_values(self):
        split_values = [self.get_split_value(i) for i in xrange(self.dimension)]
        return split_values

    def set_mpq_values(self, mpq_values):
        import gmpy2
        split_values = [(long(value.numerator), long(value.denominator)) for value in mpq_values]
        self.set_split_values(split_values)                      

    def set_split_values(self, split_values):
        for index in xrange(self.dimension):
            val = split_values[index]
            self.set_split_value(index, val[0], val[1])

EuclideanVector_swigregister = _iB4e.EuclideanVector_swigregister
EuclideanVector_swigregister(EuclideanVector)


def computesubfactors(*args):
  return _iB4e.computesubfactors(*args)
computesubfactors = _iB4e.computesubfactors

def dotproduct(*args):
  return _iB4e.dotproduct(*args)
dotproduct = _iB4e.dotproduct

def fourbyfourdet(*args):
  return _iB4e.fourbyfourdet(*args)
fourbyfourdet = _iB4e.fourbyfourdet

def gcd(*args):
  return _iB4e.gcd(*args)
gcd = _iB4e.gcd

def gcd2(*args):
  return _iB4e.gcd2(*args)
gcd2 = _iB4e.gcd2
class vertexnode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vertexnode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vertexnode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _iB4e.vertexnode_next_set
    __swig_getmethods__["next"] = _iB4e.vertexnode_next_get
    if _newclass:next = _swig_property(_iB4e.vertexnode_next_get, _iB4e.vertexnode_next_set)
    __swig_setmethods__["item"] = _iB4e.vertexnode_item_set
    __swig_getmethods__["item"] = _iB4e.vertexnode_item_get
    if _newclass:item = _swig_property(_iB4e.vertexnode_item_get, _iB4e.vertexnode_item_set)
    def __init__(self): 
        this = _iB4e.new_vertexnode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iB4e.delete_vertexnode
    __del__ = lambda self : None;
vertexnode_swigregister = _iB4e.vertexnode_swigregister
vertexnode_swigregister(vertexnode)

class BBPolytope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBPolytope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BBPolytope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == BBPolytope:
            _self = None
        else:
            _self = self
        this = _iB4e.new_BBPolytope(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def Build(self): return _iB4e.BBPolytope_Build(self)
    def BlackBoxOptimize(self, *args): return _iB4e.BBPolytope_BlackBoxOptimize(self, *args)
    __swig_destroy__ = _iB4e.delete_BBPolytope
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _iB4e.disown_BBPolytope(self)
        return weakref_proxy(self)
BBPolytope_swigregister = _iB4e.BBPolytope_swigregister
BBPolytope_swigregister(BBPolytope)

class pairll(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairll, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairll, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _iB4e.new_pairll(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _iB4e.pairll_first_set
    __swig_getmethods__["first"] = _iB4e.pairll_first_get
    if _newclass:first = _swig_property(_iB4e.pairll_first_get, _iB4e.pairll_first_set)
    __swig_setmethods__["second"] = _iB4e.pairll_second_set
    __swig_getmethods__["second"] = _iB4e.pairll_second_get
    if _newclass:second = _swig_property(_iB4e.pairll_second_get, _iB4e.pairll_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _iB4e.delete_pairll
    __del__ = lambda self : None;
pairll_swigregister = _iB4e.pairll_swigregister
pairll_swigregister(pairll)

# This file is compatible with both classic and new-style classes.


